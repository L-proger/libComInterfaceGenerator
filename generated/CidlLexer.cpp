
// Generated from Grammar/Cidl.g4 by ANTLR 4.11.1


#include "CidlLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct CidlLexerStaticData final {
  CidlLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  CidlLexerStaticData(const CidlLexerStaticData&) = delete;
  CidlLexerStaticData(CidlLexerStaticData&&) = delete;
  CidlLexerStaticData& operator=(const CidlLexerStaticData&) = delete;
  CidlLexerStaticData& operator=(CidlLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag cidllexerLexerOnceFlag;
CidlLexerStaticData *cidllexerLexerStaticData = nullptr;

void cidllexerLexerInitialize() {
  assert(cidllexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<CidlLexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
      "T__9", "T__10", "T__11", "MINUS", "PLUS", "COMMENT", "LINE_COMMENT", 
      "INTEGER_LITERAL", "HEX_LITERAL", "HEX_DIGIT", "ID_INTEGER_PRIMITIVE", 
      "ID_UINT8", "ID_UINT16", "ID_UINT32", "ID_UINT64", "ID_INT8", "ID_INT16", 
      "ID_INT32", "ID_INT64", "ID_INTERFACE", "ID_STRUCT", "ID_ENUM", "ID_IMPORT", 
      "LEFT_SQUARE_BRACKET", "FLOAT", "FLOAT_SUFFIX", "EXPONENT", "ESC_SEQ", 
      "OCTAL_ESC", "UNICODE_ESC", "STRING_LITERAL", "RIGHT_SQUARE_BRACKET", 
      "ID", "WS", "INTEGER", "LEFT_BRACKET", "RIGHT_BRACKET", "LCURLY", 
      "RCURLY", "SEMICOLON", "COLON"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "','", "'.'", "'&'", "'[]'", "'='", "'double'", "'float'", "'void'", 
      "'IUnknown'", "'bool'", "'string'", "'Guid'", "'-'", "'+'", "", "", 
      "", "", "", "'uint8'", "'uint16'", "'uint32'", "'uint64'", "'int8'", 
      "'int16'", "'int32'", "'int64'", "'interface'", "'struct'", "'enum'", 
      "'import'", "'['", "", "", "", "']'", "", "", "", "'('", "')'", "'{'", 
      "'}'", "';'", "':'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "MINUS", "PLUS", 
      "COMMENT", "LINE_COMMENT", "INTEGER_LITERAL", "HEX_LITERAL", "ID_INTEGER_PRIMITIVE", 
      "ID_UINT8", "ID_UINT16", "ID_UINT32", "ID_UINT64", "ID_INT8", "ID_INT16", 
      "ID_INT32", "ID_INT64", "ID_INTERFACE", "ID_STRUCT", "ID_ENUM", "ID_IMPORT", 
      "LEFT_SQUARE_BRACKET", "FLOAT", "FLOAT_SUFFIX", "STRING_LITERAL", 
      "RIGHT_SQUARE_BRACKET", "ID", "WS", "INTEGER", "LEFT_BRACKET", "RIGHT_BRACKET", 
      "LCURLY", "RCURLY", "SEMICOLON", "COLON"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,45,408,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,
  	1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,
  	8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,
  	10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,14,5,
  	14,165,8,14,10,14,12,14,168,9,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,
  	15,1,15,5,15,179,8,15,10,15,12,15,182,9,15,1,15,3,15,185,8,15,1,15,1,
  	15,1,15,1,15,1,16,4,16,192,8,16,11,16,12,16,193,1,17,1,17,1,17,4,17,199,
  	8,17,11,17,12,17,200,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
  	3,19,213,8,19,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,
  	1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,
  	1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,26,
  	1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,
  	1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,
  	1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,
  	1,33,4,33,297,8,33,11,33,12,33,298,1,33,1,33,5,33,303,8,33,10,33,12,33,
  	306,9,33,1,33,3,33,309,8,33,1,33,1,33,4,33,313,8,33,11,33,12,33,314,1,
  	33,3,33,318,8,33,1,33,3,33,321,8,33,1,33,4,33,324,8,33,11,33,12,33,325,
  	1,33,1,33,3,33,330,8,33,3,33,332,8,33,1,34,1,34,1,35,1,35,3,35,338,8,
  	35,1,35,4,35,341,8,35,11,35,12,35,342,1,36,1,36,1,36,1,36,3,36,349,8,
  	36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,360,8,37,1,38,1,
  	38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,5,39,372,8,39,10,39,12,39,
  	375,9,39,1,39,1,39,1,40,1,40,1,41,1,41,5,41,383,8,41,10,41,12,41,386,
  	9,41,1,42,1,42,1,42,1,42,1,43,4,43,393,8,43,11,43,12,43,394,1,44,1,44,
  	1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,166,0,50,1,1,3,2,
  	5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,
  	16,33,17,35,18,37,0,39,19,41,20,43,21,45,22,47,23,49,24,51,25,53,26,55,
  	27,57,28,59,29,61,30,63,31,65,32,67,33,69,34,71,0,73,0,75,0,77,0,79,35,
  	81,36,83,37,85,38,87,39,89,40,91,41,93,42,95,43,97,44,99,45,1,0,11,2,
  	0,10,10,13,13,2,0,88,88,120,120,3,0,48,57,65,70,97,102,2,0,70,70,102,
  	102,2,0,69,69,101,101,2,0,43,43,45,45,8,0,34,34,39,39,92,92,98,98,102,
  	102,110,110,114,114,116,116,2,0,34,34,92,92,3,0,65,90,95,95,97,122,4,
  	0,48,57,65,90,95,95,97,122,3,0,9,10,12,13,32,32,434,0,1,1,0,0,0,0,3,1,
  	0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
  	15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,
  	0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
  	0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,
  	49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,
  	0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,
  	0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,
  	89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,
  	0,0,0,1,101,1,0,0,0,3,103,1,0,0,0,5,105,1,0,0,0,7,107,1,0,0,0,9,110,1,
  	0,0,0,11,112,1,0,0,0,13,119,1,0,0,0,15,125,1,0,0,0,17,130,1,0,0,0,19,
  	139,1,0,0,0,21,144,1,0,0,0,23,151,1,0,0,0,25,156,1,0,0,0,27,158,1,0,0,
  	0,29,160,1,0,0,0,31,174,1,0,0,0,33,191,1,0,0,0,35,195,1,0,0,0,37,202,
  	1,0,0,0,39,212,1,0,0,0,41,214,1,0,0,0,43,220,1,0,0,0,45,227,1,0,0,0,47,
  	234,1,0,0,0,49,241,1,0,0,0,51,246,1,0,0,0,53,252,1,0,0,0,55,258,1,0,0,
  	0,57,264,1,0,0,0,59,274,1,0,0,0,61,281,1,0,0,0,63,286,1,0,0,0,65,293,
  	1,0,0,0,67,331,1,0,0,0,69,333,1,0,0,0,71,335,1,0,0,0,73,348,1,0,0,0,75,
  	359,1,0,0,0,77,361,1,0,0,0,79,368,1,0,0,0,81,378,1,0,0,0,83,380,1,0,0,
  	0,85,387,1,0,0,0,87,392,1,0,0,0,89,396,1,0,0,0,91,398,1,0,0,0,93,400,
  	1,0,0,0,95,402,1,0,0,0,97,404,1,0,0,0,99,406,1,0,0,0,101,102,5,44,0,0,
  	102,2,1,0,0,0,103,104,5,46,0,0,104,4,1,0,0,0,105,106,5,38,0,0,106,6,1,
  	0,0,0,107,108,5,91,0,0,108,109,5,93,0,0,109,8,1,0,0,0,110,111,5,61,0,
  	0,111,10,1,0,0,0,112,113,5,100,0,0,113,114,5,111,0,0,114,115,5,117,0,
  	0,115,116,5,98,0,0,116,117,5,108,0,0,117,118,5,101,0,0,118,12,1,0,0,0,
  	119,120,5,102,0,0,120,121,5,108,0,0,121,122,5,111,0,0,122,123,5,97,0,
  	0,123,124,5,116,0,0,124,14,1,0,0,0,125,126,5,118,0,0,126,127,5,111,0,
  	0,127,128,5,105,0,0,128,129,5,100,0,0,129,16,1,0,0,0,130,131,5,73,0,0,
  	131,132,5,85,0,0,132,133,5,110,0,0,133,134,5,107,0,0,134,135,5,110,0,
  	0,135,136,5,111,0,0,136,137,5,119,0,0,137,138,5,110,0,0,138,18,1,0,0,
  	0,139,140,5,98,0,0,140,141,5,111,0,0,141,142,5,111,0,0,142,143,5,108,
  	0,0,143,20,1,0,0,0,144,145,5,115,0,0,145,146,5,116,0,0,146,147,5,114,
  	0,0,147,148,5,105,0,0,148,149,5,110,0,0,149,150,5,103,0,0,150,22,1,0,
  	0,0,151,152,5,71,0,0,152,153,5,117,0,0,153,154,5,105,0,0,154,155,5,100,
  	0,0,155,24,1,0,0,0,156,157,5,45,0,0,157,26,1,0,0,0,158,159,5,43,0,0,159,
  	28,1,0,0,0,160,161,5,47,0,0,161,162,5,42,0,0,162,166,1,0,0,0,163,165,
  	9,0,0,0,164,163,1,0,0,0,165,168,1,0,0,0,166,167,1,0,0,0,166,164,1,0,0,
  	0,167,169,1,0,0,0,168,166,1,0,0,0,169,170,5,42,0,0,170,171,5,47,0,0,171,
  	172,1,0,0,0,172,173,6,14,0,0,173,30,1,0,0,0,174,175,5,47,0,0,175,176,
  	5,47,0,0,176,180,1,0,0,0,177,179,8,0,0,0,178,177,1,0,0,0,179,182,1,0,
  	0,0,180,178,1,0,0,0,180,181,1,0,0,0,181,184,1,0,0,0,182,180,1,0,0,0,183,
  	185,5,13,0,0,184,183,1,0,0,0,184,185,1,0,0,0,185,186,1,0,0,0,186,187,
  	5,10,0,0,187,188,1,0,0,0,188,189,6,15,0,0,189,32,1,0,0,0,190,192,2,48,
  	57,0,191,190,1,0,0,0,192,193,1,0,0,0,193,191,1,0,0,0,193,194,1,0,0,0,
  	194,34,1,0,0,0,195,196,5,48,0,0,196,198,7,1,0,0,197,199,3,37,18,0,198,
  	197,1,0,0,0,199,200,1,0,0,0,200,198,1,0,0,0,200,201,1,0,0,0,201,36,1,
  	0,0,0,202,203,7,2,0,0,203,38,1,0,0,0,204,213,3,41,20,0,205,213,3,43,21,
  	0,206,213,3,45,22,0,207,213,3,47,23,0,208,213,3,49,24,0,209,213,3,51,
  	25,0,210,213,3,53,26,0,211,213,3,55,27,0,212,204,1,0,0,0,212,205,1,0,
  	0,0,212,206,1,0,0,0,212,207,1,0,0,0,212,208,1,0,0,0,212,209,1,0,0,0,212,
  	210,1,0,0,0,212,211,1,0,0,0,213,40,1,0,0,0,214,215,5,117,0,0,215,216,
  	5,105,0,0,216,217,5,110,0,0,217,218,5,116,0,0,218,219,5,56,0,0,219,42,
  	1,0,0,0,220,221,5,117,0,0,221,222,5,105,0,0,222,223,5,110,0,0,223,224,
  	5,116,0,0,224,225,5,49,0,0,225,226,5,54,0,0,226,44,1,0,0,0,227,228,5,
  	117,0,0,228,229,5,105,0,0,229,230,5,110,0,0,230,231,5,116,0,0,231,232,
  	5,51,0,0,232,233,5,50,0,0,233,46,1,0,0,0,234,235,5,117,0,0,235,236,5,
  	105,0,0,236,237,5,110,0,0,237,238,5,116,0,0,238,239,5,54,0,0,239,240,
  	5,52,0,0,240,48,1,0,0,0,241,242,5,105,0,0,242,243,5,110,0,0,243,244,5,
  	116,0,0,244,245,5,56,0,0,245,50,1,0,0,0,246,247,5,105,0,0,247,248,5,110,
  	0,0,248,249,5,116,0,0,249,250,5,49,0,0,250,251,5,54,0,0,251,52,1,0,0,
  	0,252,253,5,105,0,0,253,254,5,110,0,0,254,255,5,116,0,0,255,256,5,51,
  	0,0,256,257,5,50,0,0,257,54,1,0,0,0,258,259,5,105,0,0,259,260,5,110,0,
  	0,260,261,5,116,0,0,261,262,5,54,0,0,262,263,5,52,0,0,263,56,1,0,0,0,
  	264,265,5,105,0,0,265,266,5,110,0,0,266,267,5,116,0,0,267,268,5,101,0,
  	0,268,269,5,114,0,0,269,270,5,102,0,0,270,271,5,97,0,0,271,272,5,99,0,
  	0,272,273,5,101,0,0,273,58,1,0,0,0,274,275,5,115,0,0,275,276,5,116,0,
  	0,276,277,5,114,0,0,277,278,5,117,0,0,278,279,5,99,0,0,279,280,5,116,
  	0,0,280,60,1,0,0,0,281,282,5,101,0,0,282,283,5,110,0,0,283,284,5,117,
  	0,0,284,285,5,109,0,0,285,62,1,0,0,0,286,287,5,105,0,0,287,288,5,109,
  	0,0,288,289,5,112,0,0,289,290,5,111,0,0,290,291,5,114,0,0,291,292,5,116,
  	0,0,292,64,1,0,0,0,293,294,5,91,0,0,294,66,1,0,0,0,295,297,2,48,57,0,
  	296,295,1,0,0,0,297,298,1,0,0,0,298,296,1,0,0,0,298,299,1,0,0,0,299,300,
  	1,0,0,0,300,304,5,46,0,0,301,303,2,48,57,0,302,301,1,0,0,0,303,306,1,
  	0,0,0,304,302,1,0,0,0,304,305,1,0,0,0,305,308,1,0,0,0,306,304,1,0,0,0,
  	307,309,3,71,35,0,308,307,1,0,0,0,308,309,1,0,0,0,309,332,1,0,0,0,310,
  	312,5,46,0,0,311,313,2,48,57,0,312,311,1,0,0,0,313,314,1,0,0,0,314,312,
  	1,0,0,0,314,315,1,0,0,0,315,317,1,0,0,0,316,318,3,71,35,0,317,316,1,0,
  	0,0,317,318,1,0,0,0,318,320,1,0,0,0,319,321,3,69,34,0,320,319,1,0,0,0,
  	320,321,1,0,0,0,321,332,1,0,0,0,322,324,2,48,57,0,323,322,1,0,0,0,324,
  	325,1,0,0,0,325,323,1,0,0,0,325,326,1,0,0,0,326,327,1,0,0,0,327,329,3,
  	71,35,0,328,330,3,69,34,0,329,328,1,0,0,0,329,330,1,0,0,0,330,332,1,0,
  	0,0,331,296,1,0,0,0,331,310,1,0,0,0,331,323,1,0,0,0,332,68,1,0,0,0,333,
  	334,7,3,0,0,334,70,1,0,0,0,335,337,7,4,0,0,336,338,7,5,0,0,337,336,1,
  	0,0,0,337,338,1,0,0,0,338,340,1,0,0,0,339,341,2,48,57,0,340,339,1,0,0,
  	0,341,342,1,0,0,0,342,340,1,0,0,0,342,343,1,0,0,0,343,72,1,0,0,0,344,
  	345,5,92,0,0,345,349,7,6,0,0,346,349,3,77,38,0,347,349,3,75,37,0,348,
  	344,1,0,0,0,348,346,1,0,0,0,348,347,1,0,0,0,349,74,1,0,0,0,350,351,5,
  	92,0,0,351,352,2,48,51,0,352,353,2,48,55,0,353,360,2,48,55,0,354,355,
  	5,92,0,0,355,356,2,48,55,0,356,360,2,48,55,0,357,358,5,92,0,0,358,360,
  	2,48,55,0,359,350,1,0,0,0,359,354,1,0,0,0,359,357,1,0,0,0,360,76,1,0,
  	0,0,361,362,5,92,0,0,362,363,5,117,0,0,363,364,3,37,18,0,364,365,3,37,
  	18,0,365,366,3,37,18,0,366,367,3,37,18,0,367,78,1,0,0,0,368,373,5,34,
  	0,0,369,372,3,73,36,0,370,372,8,7,0,0,371,369,1,0,0,0,371,370,1,0,0,0,
  	372,375,1,0,0,0,373,371,1,0,0,0,373,374,1,0,0,0,374,376,1,0,0,0,375,373,
  	1,0,0,0,376,377,5,34,0,0,377,80,1,0,0,0,378,379,5,93,0,0,379,82,1,0,0,
  	0,380,384,7,8,0,0,381,383,7,9,0,0,382,381,1,0,0,0,383,386,1,0,0,0,384,
  	382,1,0,0,0,384,385,1,0,0,0,385,84,1,0,0,0,386,384,1,0,0,0,387,388,7,
  	10,0,0,388,389,1,0,0,0,389,390,6,42,0,0,390,86,1,0,0,0,391,393,2,48,57,
  	0,392,391,1,0,0,0,393,394,1,0,0,0,394,392,1,0,0,0,394,395,1,0,0,0,395,
  	88,1,0,0,0,396,397,5,40,0,0,397,90,1,0,0,0,398,399,5,41,0,0,399,92,1,
  	0,0,0,400,401,5,123,0,0,401,94,1,0,0,0,402,403,5,125,0,0,403,96,1,0,0,
  	0,404,405,5,59,0,0,405,98,1,0,0,0,406,407,5,58,0,0,407,100,1,0,0,0,24,
  	0,166,180,184,193,200,212,298,304,308,314,317,320,325,329,331,337,342,
  	348,359,371,373,384,394,1,0,1,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  cidllexerLexerStaticData = staticData.release();
}

}

CidlLexer::CidlLexer(CharStream *input) : Lexer(input) {
  CidlLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *cidllexerLexerStaticData->atn, cidllexerLexerStaticData->decisionToDFA, cidllexerLexerStaticData->sharedContextCache);
}

CidlLexer::~CidlLexer() {
  delete _interpreter;
}

std::string CidlLexer::getGrammarFileName() const {
  return "Cidl.g4";
}

const std::vector<std::string>& CidlLexer::getRuleNames() const {
  return cidllexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& CidlLexer::getChannelNames() const {
  return cidllexerLexerStaticData->channelNames;
}

const std::vector<std::string>& CidlLexer::getModeNames() const {
  return cidllexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& CidlLexer::getVocabulary() const {
  return cidllexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView CidlLexer::getSerializedATN() const {
  return cidllexerLexerStaticData->serializedATN;
}

const atn::ATN& CidlLexer::getATN() const {
  return *cidllexerLexerStaticData->atn;
}




void CidlLexer::initialize() {
  ::antlr4::internal::call_once(cidllexerLexerOnceFlag, cidllexerLexerInitialize);
}
